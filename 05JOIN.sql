[LEVEL 2]
<조건에 맞는 도서와 저자 리스트 출력하기>
SELECT B.TITLE, A.NAME
FROM AUTHOR A
JOIN BOOK B ON A.AUTHOR_ID = B.AUTHOR_ID
WHERE B.PUBLISH_YEAR >= 2015

<상품 별 오프라인 매출 구하기>
SELECT P.PRODUCT_NAME, SUM(O.PRICE)
FROM ORDERS O
JOIN PRODUCT P ON O.PRODUCT_ID = P.PRODUCT_ID
WHERE O.TYPE = 'offline'
GROUP BY P.PRODUCT_NAME

[LEVEL 3]
<없어진 기록 찾기>
SELECT ANIMAL_OUTS.ANIMAL_ID, ANIMAL_OUTS.NAME
FROM ANIMAL_OUTS
LEFT JOIN ANIMAL_INS
ON ANIMAL_OUTS.ANIMAL_ID = ANIMAL_INS.ANIMAL_ID
WHERE ANIMAL_INS.ANIMAL_ID IS NULL
ORDER BY ANIMAL_OUTS.ANIMAL_ID;

<있었는데요 없었습니다>
SELECT OUTS.ANIMAL_ID, OUTS.NAME
FROM ANIMAL_OUTS OUTS
LEFT JOIN ANIMAL_INS INS
ON OUTS.ANIMAL_ID = INS.ANIMAL_ID
WHERE INS.ANIMAL_ID IS NULL
ORDER BY OUTS.ANIMAL_ID ASC;

<오랜 기간 보호한 동물(1)>
SELECT ANIMAL_ID, NAME
FROM ANIMAL_OUTS
WHERE DATETIME <= DATE_SUB(NOW(), INTERVAL 6 MONTH)
ORDER BY DATETIME ASC;

[LEVEL 4]
<특정 기간동안 대여 가능한 자동차들의 대여비용 구하기>
SELECT R.CAR_ID, C.CAR_NAME, C.CAR_MODEL, SUM(R.RENTAL_FEE) AS RENTAL_FEE
FROM RENTAL_RECORDS R
JOIN CARS C ON R.CAR_ID = C.CAR_ID
WHERE R.RENTAL_START_DAY <= '2023-04-25' AND R.RENTAL_END_DAY >= '2023-04-25'
GROUP BY R.CAR_ID
HAVING COUNT(R.CAR_ID) = (SELECT COUNT(DISTINCT R2.USER_ID)
                          FROM RENTAL_RECORDS R2
                          WHERE R2.CAR_ID = R.CAR_ID)

<5월 식품들의 총매출 조회하기>
SELECT SUM(price) AS total_sales
FROM sales
WHERE MONTH(sale_date) = 5
  AND category = '음식';

<주문량이 많은 아이스크림들 조회하기>
SELECT A.이름, A.가격, COUNT(*) as 판매량
FROM 아이스크림_메뉴 A JOIN 주문_상세 B
ON A.메뉴_ID = B.메뉴_ID
WHERE A.종류 = '아이스크림' AND B.주문_시간 BETWEEN '2022-04-01' AND '2022-04-30'
GROUP BY A.메뉴_ID
ORDER BY 판매량 DESC;

<그룹별 조건에 맞는 식당 목록 출력하기>
SELECT R.NAME, R.TYPE, R.PRICE
FROM RESTAURANTS R
JOIN MENU M ON R.ID = M.RESTAURANT_ID
WHERE M.NAME LIKE '%Pizza%' AND R.PRICE <= 15000
GROUP BY R.ID
HAVING COUNT(*) >= 2
ORDER BY R.NAME;

<보호소에서 중성화한 동물>
SELECT animal_id, animal_type, name, sex_upon_intake
FROM animal_ins
WHERE sex_upon_intake LIKE '%Intact%'
  AND (animal_type = 'Dog' OR animal_type = 'Cat')
ORDER BY animal_id;
